type Query {
	allBusinesses(first: Int = 10, offset: Int = 0): [Business!]!
	businessBySearchTerm(
		search: String!
		first: Int = 10
		offset: Int = 0
		orderBy: BusinessOrdering = name_asc
	): [Business!]!
	userById(id: ID!): User
}

enum BusinessOrdering {
	name_asc
	name_desc
}


type Business {
	businessId: ID!
	name: String
	address: String
	avgStars: Float
	photos(first: Int = 3, offset: Int = 0): [Photo!]!
	reviews(first: Int = 3, offset: Int = 0): [Review!]!
}

type User {
	userId: ID!
	name: String
	photos: [Photo!]!
	reviews: [Review!]!
}

type Photo {
	business: Business!
	user: User!
	photoId: ID!
	url: String
}

type Review {
	reviewId: ID!
	stars: Float
	text: String
	user: User!
	business: Business!
}

# query, mutation, subscription

query businessSearch(
	$searchTerm: String!
	$businessLimit: Int
	$businessSkip: Int
	$businessOrder: BusinessOrdering
	$reviewLimit: Int
) {
	businessBySearchTerm(
		search: $searchTerm
		first: $businessLimit
		offset: $businessSkip
		orderBy: $businessOrder
	) {
		name
		avgStars
		reviews(first: $reviewLimit) {
			stars
			text
			user {
				name
			}
		}
	}
}

